{"version":3,"sources":["serviceWorker.js","loader/index.js","useritem/index.js","userdetails/index.js","userlist/index.js","usercontainer/index.js","index.js"],"names":["Boolean","window","location","hostname","match","count","loaderPercent","setInterval","id","src","UserItem","props","this","bgColor","selectedUser","divStyle1","backgroundColor","key","user","style","onClick","selectUser","name","className","confirm","deleteUser","React","Component","UserDetails","email","website","phone","address","city","company","UserList","userDetails","state","userList","isData","displayDetails","fetch","method","then","response","json","console","log","setState","i","newList","filter","ele","find","document","querySelector","personName","prompt","newId","length","body","JSON","stringify","headers","addedData","getUsers","map","bind","addUser","UserContainer","class","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d3d2fba.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nlet count = 0;\r\nlet timerS ;\r\nfunction loaderPercent() {\r\n    //document.getElementById(\"loader\").style.display = \"block\";\r\n    timerS = setInterval(function() {\r\n        if (count > 99) {\r\n            count = 0;\r\n        } \r\n        count ++;\r\n        //document.getElementById(\"countDisplay\").innerHTML = count + \"%\";\r\n    }, 200)\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"countDisplay\"></div>\r\n            <img src=\"loader.gif\" id=\"loader\"></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction stopLoading() {\r\n    document.getElementById(\"loader\").style.display = \"none\";\r\n    count = 0;\r\n    document.getElementById(\"countDisplay\").innerHTML = \"Load here\";\r\n    clearInterval(timerS);\r\n}\r\n\r\nexport default loaderPercent","import React from 'react';\r\nimport './index.css'\r\n\r\nclass UserItem extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n \r\n    render() {\r\n        this.bgColor = this.props.selectedUser ? \"#91a9ec\" : \"\"\r\n        const divStyle1 = {\r\n            backgroundColor: this.bgColor\r\n        };\r\n        const divStyle2 = {\r\n            backgroundColor: \"\"\r\n        };\r\n        return (\r\n                <tr key={this.props.user.id} id={this.props.user.id} style={this.props.selectedUser && (this.props.selectedUser.id === this.props.user.id) ? divStyle1 : divStyle2}> {this.props.user.id}\r\n                    <td onClick={() => {this.props.selectUser(this.props.user.id)}}>{this.props.user.name} </td>\r\n                    <td> <img src=\"../../public/delete.png\"\r\n                        className=\"btn-del\"\r\n                        onClick={() => { if (window.confirm('Are you sure to delete this user?')) this.props.deleteUser(this.props.user.id) } }></img></td>\r\n                    <td>\r\n                    {/* <button \r\n                        className=\"btn-select\"\r\n                        onClick={() => {this.props.selectUser(this.props.user.id) } }>Select User</button> */}\r\n                    </td>\r\n                </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserItem\r\n    ","import React from 'react';\r\n\r\nclass UserDetails extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    /* userDetailsRender(selectedID) {\r\n        if (this.state.displayDetails) {\r\n          if(this.newList) {\r\n            this.selectedUserId = selectedID+1;\r\n          } \r\n          else {\r\n            this.userDetails =(\r\n            <div className=\"userDetail\">\r\n              <ul>  Selected User Details :\r\n                <li>Name: {this.props.users[selectedID].name}</li>\r\n                <li>Email Id: {this.props.users[selectedID].email}</li>\r\n                <li>Website: {this.props.users[selectedID].website}</li>\r\n                <li>Contact: {this.props.users[selectedID].phone}</li>\r\n                <li>City: {this.props.users[selectedID].address.city}</li>\r\n                <li>Compny Name: {this.props.users[selectedID].company.name}</li>\r\n            </ul>\r\n          </div>)\r\n        }\r\n      }\r\n    } */\r\n\r\nrender() {\r\n    return (\r\n        <ul> Selected User Details :\r\n          <li>Name: {this.props.selectedUser.name}</li>\r\n          <li>Email Id: {this.props.selectedUser.email}</li>\r\n          <li>Website: {this.props.selectedUser.website}</li>\r\n          <li>Contact: {this.props.selectedUser.phone}</li>\r\n          <li>City: {this.props.selectedUser.address.city}</li>\r\n          <li>Compny Name: {this.props.selectedUser.company.name}</li>\r\n        </ul>\r\n    )\r\n}\r\n}\r\n\r\nexport default UserDetails","import React from 'react';\r\nimport './index.css';\r\nimport LoaderPercent from '.././loader'\r\nimport UserItem from '.././useritem'\r\nimport UserDetails from '../userdetails';\r\n\r\n\r\nclass UserList extends React.Component{\r\n    constructor() {\r\n      super();\r\n      this.userDetails = null;\r\n      this.state = {\r\n          userList : null,\r\n          isData: false,\r\n          displayDetails : false,\r\n          selectedUser:null\r\n          }\r\n    }\r\n  \r\n    getUsers() {\r\n      fetch('https://jsonplaceholder.typicode.com/users', {\r\n        method: 'GET',\r\n       })\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          console.log(json)\r\n          this.setState({userList: json, isData:true})\r\n        })\r\n    }\r\n\r\n    deleteUser(i) {\r\n      const fetchURL = 'https://jsonplaceholder.typicode.com/users/'+ i;\r\n      const newData = fetch(fetchURL, {\r\n          method: 'DELETE',\r\n         })\r\n         this.newList = this.state.userList.filter(function(ele){ return ele.id !== i; });\r\n         this.setState({userList: this.newList})\r\n    }\r\n\r\n    selectUser(i) {\r\n      if (this.state.selectedUser) {\r\n        //document.getElementById(this.selectedUser.id ).style.background = \"none\"\r\n      }\r\n      this.selectedUser = this.state.userList.find((ele) => ele.id === i)\r\n      //document.getElementById(i).style.background = \"#91a9ec\"\r\n      this.setState({\r\n        displayDetails:true,\r\n        selectedUser: this.selectedUser\r\n      })\r\n    }\r\n\r\n    addUser() {\r\n      console.log(\"add user\" + document.querySelector(\".user-list\"))\r\n      let personName = window.prompt(\"Please enter name\")\r\n      let newId = this.state.userList.length + 1\r\n      console.log(this.state.userList.length)\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users', {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            \"id\": newId,\r\n            \"name\": personName,\r\n            \"username\": \"Harshada\",\r\n            \"email\": \"harsh@april.biz\",\r\n            \"address\": {\r\n              \"street\": \"Boisar tarapur\",\r\n              \"suite\": \"Apt. Nh\",\r\n              \"city\": \"Mumbai\",\r\n              \"zipcode\": \"401504-3874\",\r\n              \"geo\": {\r\n                \"lat\": \"-37.3159\",\r\n                \"lng\": \"81.1496\"\r\n              }\r\n            },\r\n            \"phone\": \"55865-881125-255\",\r\n            \"website\": \"hahhahye.org\",\r\n            \"company\": {\r\n              \"name\": \"Radheya-Foundation\",\r\n              \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n              \"bs\": \"harness real-time e-markets\"\r\n            }\r\n          },),\r\n          headers: {\r\n            'Content-type': 'application/json; charset=UTF-8',\r\n          },\r\n        })\r\n          .then((response) => response.json())\r\n          .then((addedData) => {\r\n            console.log(addedData)\r\n            this.setState({userList : [...this.state.userList, addedData]})\r\n            console.log(this.state.userList)\r\n          })\r\n        \r\n    }\r\n  componentDidMount() {\r\n      this.getUsers()\r\n  }\r\n\r\n     render() {\r\n      return(\r\n        <div>\r\n        <div className=\"user-list\">\r\n        {this.state.isData ? (this.state.userList.map((user) => <UserItem user={user} selectedUser={this.state.selectedUser} selectUser={this.selectUser.bind(this)} deleteUser={this.deleteUser.bind(this)}/>)) : \r\n        (<LoaderPercent />)}\r\n        <button onClick={this.addUser.bind(this)}> Add User </button>\r\n        </div>\r\n        <div className=\"user-details\">\r\n        {this.state.displayDetails ? <UserDetails selectedUser={this.selectedUser}/> : <div>Select any user to see details</div>}\r\n        </div>\r\n        </div>\r\n        \r\n      )\r\n    }\r\n  }\r\n\r\n  export default UserList","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport UserList from '.././userlist/index'\r\n// import './index.css';\r\n   \r\nfunction UserContainer() {\r\n    return (\r\n        <div class=\"user-container\">\r\n            <UserList />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserContainer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport UserContainer from './usercontainer/index'\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <UserContainer />,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}